using System.Collections.Generic;
using Assets.Scripts.Combat;
using Assets.Scripts.EncounterGenerator.Model;

namespace Assets.Scripts.EncounterGenerator.Configuration
{
    public class EncounterGeneratorConfiguration
    {

        /// <summary>
        /// How to individual roles correspond to either defense or offense of the group.
        /// </summary>
        public Dictionary<MonsterRole, float> MonsterRoleAttackDefenseRatios = new Dictionary<MonsterRole, float>
        {
            { MonsterRole.Brute, 0.5f },
            { MonsterRole.Leader,  1f },
            { MonsterRole.Lurker,  3f },
            { MonsterRole.Minion,  1f },
            { MonsterRole.Sniper,  2f },
        };

        /// <summary>
        /// How many regular monsters is the specified monster rank worth.
        /// </summary>
        public Dictionary<MonsterType, float> MonsterRankWeights = new Dictionary<MonsterType, float>
        {
            // The weights were determined by some basic statistical analysis,
            { new MonsterType(MonsterRank.Minion, MonsterRole.Minion), 0.019f },
            { new MonsterType(MonsterRank.Regular, MonsterRole.Brute), 0.028f },
            { new MonsterType(MonsterRank.Elite, MonsterRole.Brute), 0.070f },
            { new MonsterType(MonsterRank.Boss, MonsterRole.Brute), 0.136f },
            { new MonsterType(MonsterRank.Regular, MonsterRole.Leader), 0f }, // Regular leaders do not exist.
            { new MonsterType(MonsterRank.Elite, MonsterRole.Leader), 0.048f },
            { new MonsterType(MonsterRank.Boss, MonsterRole.Leader), 0.113f },
            { new MonsterType(MonsterRank.Regular, MonsterRole.Lurker), 0.050f },
            { new MonsterType(MonsterRank.Elite, MonsterRole.Lurker), 0.084f },
            { new MonsterType(MonsterRank.Boss, MonsterRole.Lurker), 0.146f },
            { new MonsterType(MonsterRank.Regular, MonsterRole.Sniper), 0.064f },
            { new MonsterType(MonsterRank.Elite, MonsterRole.Sniper), 0.094f },
            { new MonsterType(MonsterRank.Boss, MonsterRole.Sniper), 0.147f },
        };

        /// <summary>
        /// How likely the specified type should appear. Regular is not included, as that is the fallback if no other type is generated.
        /// </summary>
        public Dictionary<MonsterRank, float> MonsterRankProbabilities = new Dictionary<MonsterRank, float>
        {
            { MonsterRank.Minion, 0.25f },
            { MonsterRank.Elite, 0.4f },
            { MonsterRank.Boss, 0f }, // Bosses should not be generated by chance.
        };

        /// <summary>
        /// How much should the algorithm try to change its data based on actual battles. 0 means no learning at all, 1 means that it should completely change the matrix to fit the data.
        /// </summary>
        public float LearningSpeed;

    }
}
