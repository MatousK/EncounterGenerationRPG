using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;
/// <summary>
/// Represents a group which, when asked for a group of monsters, will just pick monsters randomly from a set of monsters given by the designer.
/// It will ignore the difficulty and the monster weights.
/// </summary>
[CreateAssetMenu(menuName = "Encounter generator/Monster Groups/Random Monster Group", fileName = "Random Monster Group")]
public class RandomMonsterGroup : MonsterGroupDefinition
{
    /// <summary>
    /// List of all monsters that can be generated by the algorithms.
    /// </summary>
    public List<GameObject> AllowedMonsters;
    /// <summary>
    /// Generates a list of monsters based on a request from the encounter generator.
    /// </summary>
    /// <param name="parameters">The parameters from the encounter generator.</param>
    /// <returns> The list of prefabs which should then be instantiated.</returns>
    public override List<GameObject> GenerateMonsterGroup(GenerateMonsterGroupParameters parameters)
    {
        List<GameObject> toReturn = new List<GameObject>();
        foreach (var monsterRequest in parameters.RequestedMonsters)
        {
            var possibleMonsters = GetMonstersFor(monsterRequest.Key);
            var random = new System.Random();
            for (int i = 0; i < monsterRequest.Value; ++i)
            {
                toReturn.Add(possibleMonsters[random.Next(possibleMonsters.Count)]);
            }
        }
        return toReturn;
    }
    /// <summary>
    /// Filters from the prefabs monsters which satisfy some condition.
    /// </summary>
    /// <param name="monsterTypeDefinition"></param>
    /// <returns></returns>
    protected List<GameObject> GetMonstersFor(MonsterTypeDefinition monsterTypeDefinition)
    {
        return AllowedMonsters?.Where(monsterObject =>
        {
            var monster = monsterObject.GetComponent<Monster>();
            if (monster == null)
            {
                return false;
            }
            return monster.Rank == monsterTypeDefinition.Rank && monster.Role == monsterTypeDefinition.Role;
        }).ToList() ?? new List<GameObject>();
    }
}