using System.Collections.Generic;
using System.Linq;
using Assets.Scripts.Combat;
using Assets.Scripts.EncounterGenerator.Configuration;
using Assets.Scripts.EncounterGenerator.Model;
using Assets.Scripts.Extension;

namespace Assets.Scripts.EncounterGenerator.Algorithm
{
    /// <summary>
    /// This class can select an encounter type for the next generated encounter. Encounter type is a high level overview of the encounter, meant to ensure variance in encounters.
    /// </summary>
    public class EncounterTypeManager
    {
        public EncounterTypeManager(EncounterGeneratorConfiguration configuration)
        {
            Configuration = configuration;
            FillPossibleEncounterTypes();
        }

        public EncounterGeneratorConfiguration Configuration;

        readonly Dictionary<EncounterType, int> encounterTypeWeights = new Dictionary<EncounterType, int>();

        public EncounterType SelectEncounterType(List<MonsterType> availableMonsterTypes)
        {
            bool canHaveBoss = availableMonsterTypes.Any(p => p.Rank == MonsterRank.Boss);
            bool canHaveLeader = availableMonsterTypes.Any(p => p.Role == MonsterRole.Leader);
            float minAttackToDefenseRatio = availableMonsterTypes.Min(p => Configuration.MonsterRoleAttackDefenseRatios[p.Role]);
            float maxsAttackToDefenseRatio = availableMonsterTypes.Max(p => Configuration.MonsterRoleAttackDefenseRatios[p.Role]);
            // Consider for generating only those encounters that could possibly be generated by this monster group definition.
            var validEncounters = encounterTypeWeights.Where(encounter => (!encounter.Key.HasLeader || canHaveLeader)
                                                                      && (!encounter.Key.SpawnBossIfPossible || canHaveBoss)
                                                                      && minAttackToDefenseRatio <= encounter.Key.AttackDefenseRatio
                                                                      && encounter.Key.AttackDefenseRatio <= maxsAttackToDefenseRatio);
            var selectedEncounter = validEncounters.ToArray().GetWeightedRandomElementOrDefault(encounter => encounter.Value).Key;
            AdjustEncounterWeights(selectedEncounter);
            return selectedEncounter;
        }

        /// <summary>
        /// Call after selecting the encounter to be generated. Adjusts the weights so that this encounter becomes unlikely to be generated again in the near future.
        /// </summary>
        /// <param name="selectedEncounter"></param>
        private void AdjustEncounterWeights(EncounterType selectedEncounter)
        {
            foreach (var key in encounterTypeWeights.Keys.ToList())
            {
                if (key != selectedEncounter)
                {
                    encounterTypeWeights[key]++;
                }
                else
                {
                    encounterTypeWeights[key] = 1;
                }
            }
        }

        /// <summary>
        /// Pregenerate encounters that could be generated by this class.
        /// </summary>
        private void FillPossibleEncounterTypes()
        {
            // TODO: Put in config
            // All weights start at 1. Whenever they are not picked, they weight, which is the likelyhood of being generated, will increase.
            encounterTypeWeights[new EncounterType(true, 1, true)] = 1;
            encounterTypeWeights[new EncounterType(true, 0.75f, true)] = 1;
            encounterTypeWeights[new EncounterType(true, 2, true)] = 1;
            encounterTypeWeights[new EncounterType(true, 0.5f, true)] = 1;
            encounterTypeWeights[new EncounterType(true, 1.5f, true)] = 1;

            encounterTypeWeights[new EncounterType(true, 1, false)] = 1;
            encounterTypeWeights[new EncounterType(true, 0.5f, false)] = 1;
            encounterTypeWeights[new EncounterType(true, 2, false)] = 1;
            encounterTypeWeights[new EncounterType(true, 0.75f, false)] = 1;
            encounterTypeWeights[new EncounterType(true, 1.5f, false)] = 1;

            encounterTypeWeights[new EncounterType(false, 1, true)] = 1;
            encounterTypeWeights[new EncounterType(false, 0.5f, true)] = 1;
            encounterTypeWeights[new EncounterType(false, 2, true)] = 1;
            encounterTypeWeights[new EncounterType(false, 0.75f, true)] = 1;
            encounterTypeWeights[new EncounterType(false, 1.5f, true)] = 1;

            encounterTypeWeights[new EncounterType(false, 1, false)] = 1;
            encounterTypeWeights[new EncounterType(false, 0.5f, false)] = 1;
            encounterTypeWeights[new EncounterType(false, 2, false)] = 1;
            encounterTypeWeights[new EncounterType(false, 0.75f, false)] = 1;
            encounterTypeWeights[new EncounterType(false, 1.5f, false)] = 1;
        }
    }
}
