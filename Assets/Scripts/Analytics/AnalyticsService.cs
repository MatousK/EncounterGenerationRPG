using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Assets.Scripts.Combat;
using Assets.Scripts.EncounterGenerator.Model;
using Assets.Scripts.GameFlow;
using UnityEditor;
using UnityEngine;

namespace Assets.Scripts.Analytics
{
    /// <summary>
    /// This component can send analytics data to our analytics backend. 
    /// It is a DontDestroyOnLoad object, only one instance will exist throughout the entire game.
    /// </summary>
    public class AnalyticsService : MonoBehaviour
    {
        /// <summary>
        /// Keep a count of how many times did we try to revoke the privacy agreement.
        /// </summary>
        public int RevokeAttemptIndex = 0;
        /// <summary>
        /// How many tries will we try to revoke before declaring the attempt as failure. 
        /// </summary>
        public int MaxRevokeAttempts = 100;
        /// <summary>
        /// If true, we have revoked the GDPR agreement.
        /// </summary>
        public bool RevokedAgreement
        {
            get => UserGuid == Guid.Empty;
        }
        /// <summary>
        /// If true, our attempts to send the revoke GDPR request have failed and we should not try anymore.
        /// </summary>
        public bool DidFailToSendRevokeAgreement
        {
            get => RevokeAttemptIndex >= MaxRevokeAttempts;
        }
        /// <summary>
        /// The version of the experiment. Used to differentiate v1 and v2 experiment results.
        /// </summary>
        const int ExperimentVersion = 2;
        /// <summary>
        /// GUID of the user playing the game. Regenerated when the experiment is completed, cleared when GDPR agreement is revoked.
        /// </summary>
        public Guid UserGuid = Guid.NewGuid();
        /// <summary>
        /// If true, this object is about to be destroyed and should not be used anymore.
        /// </summary>
        public bool IsPendingKill;
        /// <summary>
        /// The object on the scene indicating that we are currently trying to revoke the GDPR agreement.
        /// Can be activated while we are doing so.
        /// </summary>
        public GameObject RevokeActivityIndicatorTemplate;
        /// <summary>
        /// List of all monster types that can be in an encounter. In this order they are put into the output CSV file.
        /// </summary>
        public static List<MonsterType> OrderedMonsterTypes = new List<MonsterType>
        {
            new MonsterType(MonsterRank.Minion, MonsterRole.Minion),
            new MonsterType(MonsterRank.Regular, MonsterRole.Brute),
            new MonsterType(MonsterRank.Elite, MonsterRole.Brute),
            new MonsterType(MonsterRank.Boss, MonsterRole.Brute),
            new MonsterType(MonsterRank.Regular, MonsterRole.Leader),
            new MonsterType(MonsterRank.Elite, MonsterRole.Leader),
            new MonsterType(MonsterRank.Boss, MonsterRole.Leader),
            new MonsterType(MonsterRank.Regular, MonsterRole.Lurker),
            new MonsterType(MonsterRank.Elite, MonsterRole.Lurker),
            new MonsterType(MonsterRank.Boss, MonsterRole.Lurker),
            new MonsterType(MonsterRank.Regular, MonsterRole.Sniper),
            new MonsterType(MonsterRank.Elite, MonsterRole.Sniper),
            new MonsterType(MonsterRank.Boss, MonsterRole.Sniper),
        };
        /// <summary>
        /// This is a DontDestroyOnLoad object. 
        /// On Awake it checks whether there are existing instances of this service.
        /// If so, it destroys itself, otherwise it calls DontDestroyOnLoad.
        /// </summary>
        void Awake()
        {
            if (FindObjectsOfType<AnalyticsService>().Length > 1)
            {
                IsPendingKill = true;
                Destroy(this);
                return;
            }
            DontDestroyOnLoad(gameObject);
        }
        /// <summary>
        /// Used to reset guid once the player finishes the game.
        /// </summary>
        public void ResetGuid()
        {
            UserGuid = Guid.NewGuid();
        }
        /// <summary>
        /// Logs the results of an encounter.
        /// </summary>
        /// <param name="partyStartHp">Max HP of the party when the encounter started.</param>
        /// <param name="partyEndHp">Max HP of the party when the encounter ended.</param>
        /// <param name="partyAttack">Attack of the party.</param>
        /// <param name="encounter">Encounter that just ended.</param>
        /// <param name="expectedDifficulty">How the matrix estimated the difficulty of the encounter before it started.</param>
        /// <param name="realDifficulty">What was the actual difficulty of the encounter.</param>
        /// <param name="wasGameOver">True if the entire party was killed, otherwise false.</param>
        /// <param name="wasStatic">True if this was a static encounter, false if this encounter was generated by the matrix.</param>
        /// <param name="wasLogged">It true, this encounter modified the matrix, otherwise false.</param>
        public void LogCombat(Dictionary<HeroProfession, float> partyStartHp, Dictionary<HeroProfession, float> partyEndHp, Dictionary<HeroProfession, float> partyAttack,
            EncounterDefinition encounter, float expectedDifficulty, float realDifficulty, bool wasGameOver, bool wasStatic, bool wasLogged)
        {
            List<string> lineCells = new List<string> {
                "Combat",
                UserGuid.ToString(),
                DateTime.Now.ToFileTimeUtc().ToString(),
            };
            lineCells.Add(partyStartHp[HeroProfession.Knight].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyStartHp[HeroProfession.Ranger].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyStartHp[HeroProfession.Cleric].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyEndHp[HeroProfession.Knight].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyEndHp[HeroProfession.Ranger].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyEndHp[HeroProfession.Cleric].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyAttack[HeroProfession.Knight].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyAttack[HeroProfession.Ranger].ToString(CultureInfo.InvariantCulture));
            lineCells.Add(partyAttack[HeroProfession.Cleric].ToString(CultureInfo.InvariantCulture));
            foreach (var monsterType in OrderedMonsterTypes)
            {
                var monsterCount =
                    encounter.AllEncounterGroups.FirstOrDefault(group => group.MonsterType == monsterType)?.MonsterCount ?? 0;
                lineCells.Add(monsterCount.ToString(CultureInfo.InvariantCulture));
            }
            lineCells.Add(expectedDifficulty.ToString(CultureInfo.InvariantCulture));
            lineCells.Add(realDifficulty.ToString(CultureInfo.InvariantCulture));
            lineCells.Add(wasGameOver ? "1" : "0");
            lineCells.Add(wasStatic ? "1" : "0");
            lineCells.Add(wasLogged ? "1" : "0");
            lineCells.Add(ExperimentVersion.ToString(CultureInfo.InvariantCulture));

            StartCoroutine(LogCsvLine(lineCells));
        }
        /// <summary>
        /// Sends the GDPR agreement to the backend.
        /// </summary>
        public void LogRevoke()
        {
            Instantiate(RevokeActivityIndicatorTemplate, null);
            List<string> lineCells = new List<string> {
                "RevokeAgreement",
                UserGuid.ToString(),
                DateTime.Now.ToFileTimeUtc().ToString(),
                ExperimentVersion.ToString(CultureInfo.InvariantCulture)
            };
            StartCoroutine(LogCsvLine(lineCells, true));
        }
        /// <summary>
        /// Logs to the analytics backend that the loading of a level started.
        /// </summary>
        /// <param name="levelIndex">Index of the level that started loading.</param>
        public void LevelLoadStart(int levelIndex)
        {
            List<string> lineCells = new List<string> {
                "LevelLoadStarted",
                UserGuid.ToString(),
                DateTime.Now.ToFileTimeUtc().ToString(),
                levelIndex.ToString(),
                ExperimentVersion.ToString(CultureInfo.InvariantCulture)
            };
            StartCoroutine(LogCsvLine(lineCells));
        }
        /// <summary>
        /// Logs to the analytics backend that the loading of a level ended.
        /// </summary>
        /// <param name="levelIndex">The index of the level then stopped loading.</param>
        public void LevelLoadEnd(int levelIndex)
        {
            List<string> lineCells = new List<string> {
                "LevelLoadEnded",
                UserGuid.ToString(),
                DateTime.Now.ToFileTimeUtc().ToString(),
                levelIndex.ToString(),
                ExperimentVersion.ToString(CultureInfo.InvariantCulture)
            };
            StartCoroutine(LogCsvLine(lineCells));
        }
        /// <summary>
        /// Coroutine that tries to log a result of a combat to the server.
        /// If this is a revoke request, it will keep attempting to send the request multiple times.
        /// </summary>
        /// <param name="cells">CSV cells that should be send to the server.</param>
        /// <param name="isRevoke">If true, this CSV line is GDPR revoke agreement line.</param>
        /// <returns>Couroutine that ends when the request ends.</returns>
        private IEnumerator LogCsvLine(IEnumerable<string> cells, bool isRevoke = false)
        {
            var line = string.Join(";", cells);
            var payload = $"{{\"payload\": \"{line}\" }}";
            var payloadBytes = System.Text.Encoding.UTF8.GetBytes(payload);
            var www = UnityEngine.Networking.UnityWebRequest.Put("https://mattka.tcf2.cz/storeData.php", payloadBytes);
            www.SetRequestHeader("Accept", "application/json");
            yield return www.SendWebRequest();

            UnityEngine.Debug.Log(www.responseCode);
            AnalyticsResponse response;
            try
            {
                response = JsonUtility.FromJson<AnalyticsResponse>(www.downloadHandler.text);
            }
            catch (Exception e)
            {
                UnityEngine.Debug.LogError(e);
                response = null;
            }
            UnityEngine.Debug.Log(www.downloadHandler.text);

            if (isRevoke)
            {
                // TODO: Actually parse the json. We depend on only a single field.
                if (www.responseCode == 200 && response?.success == true)
                {
                    UserGuid = Guid.Empty;
                }
                else if (RevokeAttemptIndex++ < MaxRevokeAttempts)
                {
                    // Nothing to do but try again.
                    StartCoroutine(LogCsvLine(cells, isRevoke));
                }
            }
        }
    }
    /// <summary>
    /// The response to requests from our analytics backend.
    /// </summary>
    [Serializable]
    class AnalyticsResponse
    {
        // Purposufelly lowercase to match server response.
        public bool success;
    }
}